import streamlit as st
import os
import cv2
import numpy as np
import pandas as pd
import seaborn as sns
import random
import struct
from scipy.interpolate import UnivariateSpline
import plotly.graph_objects as go
from sklearn.decomposition import PCA
import mlflow
from sklearn.metrics import silhouette_score, silhouette_samples, davies_bouldin_score
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import pairwise_distances
from sklearn.svm import SVC
from sklearn.manifold import TSNE
import plotly.express as px
from PIL import Image
from collections import Counter
from sklearn.datasets import make_classification
from mlflow.tracking import MlflowClient

def run_PcaTSNEMinst_app():
    @st.cache_data  # L∆∞u cache ƒë·ªÉ tr√°nh load l·∫°i d·ªØ li·ªáu m·ªói l·∫ßn ch·∫°y l·∫°i Streamlit
    def get_sampled_pixels(images, sample_size=100_000):
        return np.random.choice(images.flatten(), sample_size, replace=False)

    @st.cache_data  # Cache danh s√°ch ·∫£nh ng·∫´u nhi√™n
    def get_random_indices(num_images, total_images):
        return np.random.randint(0, total_images, size=num_images)

    # C·∫•u h√¨nh Streamlit
    #   st.set_page_config(page_title="Ph√¢n lo·∫°i ·∫£nh", layout="wide")
    # ƒê·ªãnh nghƒ©a h√†m ƒë·ªÉ ƒë·ªçc file .idx
    def load_mnist_images(filename):
        with open(filename, 'rb') as f:
            magic, num, rows, cols = struct.unpack('>IIII', f.read(16))
            images = np.fromfile(f, dtype=np.uint8).reshape(num, rows, cols)
        return images

    def load_mnist_labels(filename):
        with open(filename, 'rb') as f:
            magic, num = struct.unpack('>II', f.read(8))
            labels = np.fromfile(f, dtype=np.uint8)
        return labels

    mlflow_tracking_uri = st.secrets["MLFLOW_TRACKING_URI"]
    mlflow_username = st.secrets["MLFLOW_TRACKING_USERNAME"]
    mlflow_password = st.secrets["MLFLOW_TRACKING_PASSWORD"]
    
    # Thi·∫øt l·∫≠p bi·∫øn m√¥i tr∆∞·ªùng
    os.environ["MLFLOW_TRACKING_URI"] = mlflow_tracking_uri
    os.environ["MLFLOW_TRACKING_USERNAME"] = mlflow_username
    os.environ["MLFLOW_TRACKING_PASSWORD"] = mlflow_password
    
    # Thi·∫øt l·∫≠p MLflow (ƒê·∫∑t sau khi mlflow_tracking_uri ƒë√£ c√≥ gi√° tr·ªã)
    mlflow.set_tracking_uri(mlflow_tracking_uri)



    # ƒê·ªãnh nghƒ©a ƒë∆∞·ªùng d·∫´n ƒë·∫øn c√°c file MNIST
    # dataset_path = r"C:\Users\Dell\OneDrive\Pictures\Documents\Code\python\OpenCV\HMVPYTHON\App"
    dataset_path = os.path.dirname(os.path.abspath(__file__))
    train_images_path = os.path.join(dataset_path, "train-images.idx3-ubyte")
    train_labels_path = os.path.join(dataset_path, "train-labels.idx1-ubyte")
    test_images_path = os.path.join(dataset_path, "t10k-images.idx3-ubyte")
    test_labels_path = os.path.join(dataset_path, "t10k-labels.idx1-ubyte")

    # ƒê·ªãnh nghƒ©a h√†m ƒë·ªÉ ƒë·ªçc file .idx
    def load_mnist_images(filename):
        with open(filename, 'rb') as f:
            magic, num, rows, cols = struct.unpack('>IIII', f.read(16))
            images = np.fromfile(f, dtype=np.uint8).reshape(num, rows, cols)
        return images

    def load_mnist_labels(filename):
        with open(filename, 'rb') as f:
            magic, num = struct.unpack('>II', f.read(8))
            labels = np.fromfile(f, dtype=np.uint8)
        return labels

    # T·∫£i d·ªØ li·ªáu MNIST
    try:
        train_images = load_mnist_images(train_images_path)
        train_labels = load_mnist_labels(train_labels_path)
        test_images = load_mnist_images(test_images_path)
        test_labels = load_mnist_labels(test_labels_path)

        st.session_state.train_images = train_images
        st.session_state.train_labels = train_labels
        st.session_state.test_images = test_images
        st.session_state.test_labels = test_labels
    except FileNotFoundError as e:
        st.error(f"‚ö†Ô∏è L·ªói: Kh√¥ng t√¨m th·∫•y file d·ªØ li·ªáu MNIST. Ki·ªÉm tra ƒë∆∞·ªùng d·∫´n: {e}")
        return
    except Exception as e:
        st.error(f"‚ö†Ô∏è L·ªói khi t·∫£i d·ªØ li·ªáu MNIST: {e}")
        return

    # Chu·∫©n b·ªã d·ªØ li·ªáu cho gi·∫£m chi·ªÅu (reshape images th√†nh vector)
    X_train = train_images.reshape(train_images.shape[0], -1)  # Chuy·ªÉn 28x28 th√†nh vector 784
    X_test = test_images.reshape(test_images.shape[0], -1)     # T∆∞∆°ng t·ª± cho test
    y_train = train_labels                                    # Nh√£n hu·∫•n luy·ªán
    y_test = test_labels                                      # Nh√£n ki·ªÉm tra

    # L∆∞u v√†o session_state ƒë·ªÉ s·ª≠ d·ª•ng sau
    st.session_state.X_train = X_train
    st.session_state.X_test = X_test
    st.session_state.y_train = y_train
    st.session_state.y_test = y_test

    

    # Giao di·ªán Streamlit
    st.title("üì∏ MNIST PCA_T-SNE")
    tabs = st.tabs([
            "Th√¥ng tin",
            "T·∫≠p d·ªØ li·ªáu",
            "k·ªπ thu·∫≠t thu g·ªçn chi·ªÅu",
            "Th√¥ng tin & Mlflow",
    ])
    tab_note, tab_info, tab_preprocess ,tab_mlflow= tabs
    with tab_info:
        with st.expander("**Th√¥ng tin d·ªØ li·ªáu**", expanded=True):
            st.markdown(
                '''
                **MNIST** l√† phi√™n b·∫£n ƒë∆∞·ª£c ch·ªânh s·ª≠a t·ª´ b·ªô d·ªØ li·ªáu **NIST g·ªëc** c·ªßa Vi·ªán Ti√™u chu·∫©n v√† C√¥ng ngh·ªá Qu·ªëc gia Hoa K·ª≥.  
                B·ªô d·ªØ li·ªáu ban ƒë·∫ßu g·ªìm c√°c ch·ªØ s·ªë vi·∫øt tay t·ª´ **nh√¢n vi√™n b∆∞u ƒëi·ªán** v√† **h·ªçc sinh trung h·ªçc**.  

                C√°c nh√† nghi√™n c·ª©u **Yann LeCun, Corinna Cortes, v√† Christopher Burges** ƒë√£ x·ª≠ l√Ω, chu·∫©n h√≥a v√† chuy·ªÉn ƒë·ªïi b·ªô d·ªØ li·ªáu n√†y th√†nh **MNIST**  
                ƒë·ªÉ d·ªÖ d√†ng s·ª≠ d·ª•ng h∆°n cho c√°c b√†i to√°n nh·∫≠n d·∫°ng ch·ªØ s·ªë vi·∫øt tay.
                '''
            )
            # ƒê·∫∑c ƒëi·ªÉm c·ªßa b·ªô d·ªØ li·ªáu
        with st.expander("**ƒê·∫∑c ƒëi·ªÉm c·ªßa b·ªô d·ªØ li·ªáu**", expanded=True):
            st.markdown(
                '''
                - **S·ªë l∆∞·ª£ng ·∫£nh:** 70.000 ·∫£nh ch·ªØ s·ªë vi·∫øt tay  
                - **K√≠ch th∆∞·ªõc ·∫£nh:** M·ªói ·∫£nh c√≥ k√≠ch th∆∞·ªõc 28x28 pixel  
                - **C∆∞·ªùng ƒë·ªô ƒëi·ªÉm ·∫£nh:** T·ª´ 0 (m√†u ƒëen) ƒë·∫øn 255 (m√†u tr·∫Øng)  
                - **D·ªØ li·ªáu nh√£n:** M·ªói ·∫£nh ƒëi k√®m v·ªõi m·ªôt nh√£n s·ªë t·ª´ 0 ƒë·∫øn 9  
                '''
            )
            st.write(f"üîç S·ªë l∆∞·ª£ng ·∫£nh hu·∫•n luy·ªán: `{train_images.shape[0]}`")
            st.write(f"üîç S·ªë l∆∞·ª£ng ·∫£nh ki·ªÉm tra: `{test_images.shape[0]}`")


        with st.expander("**Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng m·∫´u c·ªßa t·ª´ng ch·ªØ s·ªë t·ª´ 0 ƒë·∫øn 9 trong t·∫≠p hu·∫•n luy·ªán**", expanded=True):
            label_counts = pd.Series(train_labels).value_counts().sort_index()
            # Hi·ªÉn th·ªã b·∫£ng d·ªØ li·ªáu d∆∞·ªõi bi·ªÉu ƒë·ªì
            df_counts = pd.DataFrame({"Ch·ªØ s·ªë": label_counts.index, "S·ªë l∆∞·ª£ng m·∫´u": label_counts.values})
            st.dataframe(df_counts)
            num_images = 10
            random_indices = random.sample(range(len(train_images)), num_images)
            fig, axes = plt.subplots(1, num_images, figsize=(15, 5))
            st.write("**M·ªôt s·ªë ·∫£nh v√≠ d·ª•:**")
            for ax, idx in zip(axes, random_indices):
                ax.imshow(train_images[idx], cmap='gray')
                ax.axis("off")
                ax.set_title(f"Label: {train_labels[idx]}")

            st.pyplot(fig)

        with st.expander("**Ki·ªÉm tra h√¨nh d·∫°ng c·ªßa t·∫≠p d·ªØ li·ªáu**", expanded=True):    
                # Ki·ªÉm tra h√¨nh d·∫°ng c·ªßa t·∫≠p d·ªØ li·ªáu
            st.write("üîç H√¨nh d·∫°ng t·∫≠p hu·∫•n luy·ªán:", train_images.shape)
            st.write("üîç H√¨nh d·∫°ng t·∫≠p ki·ªÉm tra:", test_images.shape)
            # Ki·ªÉm tra xem c√≥ gi√° tr·ªã pixel n√†o ngo√†i ph·∫°m vi 0-255 kh√¥ng
            if (train_images.min() < 0) or (train_images.max() > 255):
                st.error("‚ö†Ô∏è C·∫£nh b√°o: C√≥ gi√° tr·ªã pixel ngo√†i ph·∫°m vi 0-255!")
            else:
                st.success("‚úÖ D·ªØ li·ªáu pixel h·ª£p l·ªá (0 - 255).")

            # Chu·∫©n h√≥a d·ªØ li·ªáu
            train_images = train_images.astype("float32") / 255.0
            test_images = test_images.astype("float32") / 255.0

            # Hi·ªÉn th·ªã th√¥ng b√°o sau khi chu·∫©n h√≥a
            st.success("‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c chu·∫©n h√≥a v·ªÅ kho·∫£ng [0,1].")

            # Hi·ªÉn th·ªã b·∫£ng d·ªØ li·ªáu ƒë√£ chu·∫©n h√≥a (d·∫°ng s·ªë)
            num_samples = 5  # S·ªë l∆∞·ª£ng m·∫´u hi·ªÉn th·ªã
            df_normalized = pd.DataFrame(train_images[:num_samples].reshape(num_samples, -1))  

            # st.write("**B·∫£ng d·ªØ li·ªáu sau khi chu·∫©n h√≥a**")
            # st.dataframe(df_normalized)

            
            sample_size = 10_000  
            pixel_sample = np.random.choice(train_images.flatten(), sample_size, replace=False)



    

    with tab_note:
        with st.expander("**Th√¥ng tin m√¥ h√¨nh**", expanded=True):
            # Ch·ªçn m√¥ h√¨nh
            model_option1 = st.selectbox("Ch·ªçn m√¥ h√¨nh", ["PCA (Principal Component Analysis)", "T-SNE (t-Distributed Stochastic Neighbor Embedding)"])
            
            if model_option1 == "PCA (Principal Component Analysis)":
                st.markdown("## üîπ PCA (Principal Component Analysis)")
                st.markdown("---")
                st.markdown("### Kh√°i ni·ªám PCA (Principal Component Analysis)")
                st.markdown(
                """
                - **PCA (Principal Component Analysis)** l√† m·ªôt k·ªπ thu·∫≠t gi·∫£m chi·ªÅu d·ªØ li·ªáu tuy·∫øn t√≠nh, gi√∫p chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu nhi·ªÅu chi·ªÅu
                    th√†nh m·ªôt t·∫≠p h·ª£p nh·ªè h∆°n c√°c th√†nh ph·∫ßn ch√≠nh, gi·ªØ l·∫°i ph·∫ßn l·ªõn th√¥ng tin (ph∆∞∆°ng sai) c·ªßa d·ªØ li·ªáu g·ªëc. "
                - **PCA** ho·∫°t ƒë·ªông b·∫±ng c√°ch t√¨m c√°c h∆∞·ªõng c√≥ ph∆∞∆°ng sai l·ªõn nh·∫•t v√† chi·∫øu d·ªØ li·ªáu l√™n c√°c h∆∞·ªõng ƒë√≥."
                """)

                np.random.seed(0)
                mean = [0, 0]
                cov = [[1, 0.5], [0.5, 1]]
                data = np.random.multivariate_normal(mean, cov, 100)

                st.markdown("---")
                st.markdown("### C√°c b∆∞·ªõc th·ª±c hi·ªán gi·∫£m chi·ªÅu v·ªõi PCA")
                
                st.write("**1**. T√≠nh vector k·ª≥ v·ªçng c·ªßa to√†n b·ªô d·ªØ li·ªáu")
                st.image("imgpca/b1.png",use_container_width ="auto")
                
                st.write("**2**. Tr·ª´ m·ªói ƒëi·ªÉm d·ªØ li·ªáu ƒëi vector k·ª≥ v·ªçng c·ªßa to√†n b·ªô d·ªØ li·ªáu ƒë·ªÉ ƒë∆∞·ª£c d·ªØ li·ªáu chu·∫©n ho√°")
                st.image("imgpca/b2.png",use_container_width ="auto")
                
                st.write("**3**. T√≠nh ma tr·∫≠n hi·ªáp ph∆∞∆°ng sai")

                st.write("**4**. T√≠nh c√°c vector ri√™ng v√† gi√° tr·ªã ri√™ng c·ªßa ma tr·∫≠n hi·ªáp ph∆∞∆°ng sai, s·∫Øp x·∫øp ch√∫ng theo th·ª© t·ª± gi·∫£m d·∫ßn c·ªßa tr·ªã ri√™ng.")
                st.write("**5**. Ch·ªçn K vector ri√™ng ·ª©ng v·ªõi K tr·ªã ri√™ng l·ªõn nh·∫•t ƒë·ªÉ x√¢y d·ª±ng ma tr·∫≠n UK c√≥ c√°c c·ªôt t·∫°o th√†nh m·ªôt h·ªá tr·ª±c giao. T·∫°o th√†nh m·ªôt kh√¥ng gian con g·∫ßn v·ªõi ph√¢n b·ªë c·ªßa d·ªØ li·ªáu ban ƒë·∫ßu ƒë√£ chu·∫©n ho√°.")
                st.image("imgpca/b5.png",use_container_width ="auto")

                st.write("**6**. Chi·∫øu d·ªØ li·ªáu v√†o kh√¥ng gian con ƒë√£ ch·ªçn")
                st.image("imgpca/b6.png",use_container_width ="auto")

                st.write("**7**. L·∫•y d·ªØ li·ªáu ƒë√£ chi·∫øu trong kh√¥ng gian con ƒë√£ ch·ªçn l√†m d·ªØ li·ªáu m·ªõi")
                st.image("imgpca/b7.png",use_container_width ="auto")

                st.markdown("---")
                
                st.markdown("### C√¥ng th·ª©c to√°n h·ªçc")
                st.markdown("""**C√¥ng th·ª©c gi·∫£m chi·ªÅu PCA (Principal Component Analysis):**""")
                st.latex(r"X_{PCA} = X_{std} V_k")
                st.markdown("""
                **Trong ƒë√≥:**
                - $$( X_{std} )$$: Ma tr·∫≠n d·ªØ li·ªáu ƒë√£ chu·∫©n h√≥a.  
                - $$( V_k )$$: Ma tr·∫≠n c√°c vector ri√™ng (eigenvectors) t∆∞∆°ng ·ª©ng v·ªõi $$( k )$$ gi√° tr·ªã ri√™ng l·ªõn nh·∫•t c·ªßa ma tr·∫≠n hi·ªáp ph∆∞∆°ng sai $$( C )$$. C√°c vector n√†y ƒë·∫°i di·ªán cho c√°c th√†nh ph·∫ßn ch√≠nh.  
                - K·∫øt qu·∫£ $$( X_{PCA} )$$ l√† ma tr·∫≠n d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c chi·∫øu l√™n kh√¥ng gian c·ªßa c√°c th√†nh ph·∫ßn ch√≠nh, gi√∫p gi·∫£m chi·ªÅu d·ªØ li·ªáu m√† v·∫´n gi·ªØ ƒë∆∞·ª£c ph·∫ßn l·ªõn th√¥ng tin. C√¥ng th·ª©c n√†y c≈©ng ƒë√∫ng, nh∆∞ng c·∫ßn ƒë·∫£m b·∫£o $$( V_k )$$ ƒë∆∞·ª£c t√≠nh ch√≠nh x√°c t·ª´ ma tr·∫≠n hi·ªáp ph∆∞∆°ng sai.
                """)
                st.markdown("""**T√≠nh ma tr·∫≠n hi·ªáp ph∆∞∆°ng sai (Covariance Matrix Formula):**)""")
                st.latex(r"C = \frac{1}{n-1} X_{std}^T X_{std}")
                st.markdown("""  
                **Trong ƒë√≥:** 
                - $$( X_{std} )$$: Ma tr·∫≠n d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c chu·∫©n h√≥a (m·ªói c·ªôt l√† m·ªôt bi·∫øn ƒë√£ chu·∫©n h√≥a).  
                - $$( X_{std}^T )$$: Ma tr·∫≠n chuy·ªÉn v·ªã c·ªßa $$( X_{std} )$$.  
                - $$( n )$$: S·ªë m·∫´u (s·ªë h√†ng trong ma tr·∫≠n $$( X_{std} ))$$.  
                """)
                st.markdown("---")
                

                X, y = make_classification(
                    n_features=6,
                    n_classes=3,
                    n_samples=1500,
                    n_informative=2,
                    random_state=42,  # Thay ƒë·ªïi random_state ƒë·ªÉ t·∫°o ph√¢n b·ªë ph√π h·ª£p
                    n_clusters_per_class=1
                )

                # √Åp d·ª•ng PCA ƒë·ªÉ gi·∫£m chi·ªÅu xu·ªëng 2D (v√¨ h√¨nh ·∫£nh tr√¥ng gi·ªëng 2D)
                pca = PCA(n_components=2)
                X_pca = pca.fit_transform(X)

                # Ti√™u ƒë·ªÅ v√† ƒë∆∞·ªùng ph√¢n c√°ch
                X, y = make_classification(
                    n_features=6,
                    n_classes=3,
                    n_samples=1500,
                    n_informative=2,
                    random_state=42,  # Thay ƒë·ªïi random_state ƒë·ªÉ t·∫°o ph√¢n b·ªë ph√π h·ª£p
                    n_clusters_per_class=1
                )

                # √Åp d·ª•ng PCA ƒë·ªÉ gi·∫£m chi·ªÅu xu·ªëng 3D (h·ªó tr·ª£ c·∫£ 2D v√† 3D)
                pca = PCA(n_components=3)  # Gi·∫£m xu·ªëng 3 th√†nh ph·∫ßn ch√≠nh ƒë·ªÉ h·ªó tr·ª£ c·∫£ 2D v√† 3D
                X_pca = pca.fit_transform(X)

                # Ti√™u ƒë·ªÅ v√† ƒë∆∞·ªùng ph√¢n c√°ch
                # st.markdown("---")
                st.markdown("### Bi·ªÉu ƒë·ªì PCA v·ªõi ƒê∆∞·ªùng Xu h∆∞·ªõng")

                # Cho ph√©p ng∆∞·ªùi d√πng ch·ªçn lo·∫°i bi·ªÉu ƒë·ªì (2D ho·∫∑c 3D)
                chart_type = st.selectbox("Ch·ªçn lo·∫°i bi·ªÉu ƒë·ªì:", ["2D", "3D"])

                # Hi·ªÉn th·ªã th√¥ng tin v·ªÅ d·ªØ li·ªáu
                st.markdown("**Th√¥ng tin d·ªØ li·ªáu:**")
                st.write(f"- S·ªë m·∫´u (n_samples): {X.shape[0]}")
                st.write(f"- S·ªë ƒë·∫∑c tr∆∞ng (n_features): {X.shape[1]}")
                st.write(f"- S·ªë l·ªõp (n_classes): {len(np.unique(y))}")

                # Hi·ªÉn th·ªã t·ª∑ l·ªá ph∆∞∆°ng sai ƒë∆∞·ª£c gi·∫£i th√≠ch b·ªüi PCA
                st.markdown("**T·ª∑ l·ªá ph∆∞∆°ng sai ƒë∆∞·ª£c gi·∫£i th√≠ch b·ªüi c√°c th√†nh ph·∫ßn ch√≠nh:**")
                explained_variance_ratio = pca.explained_variance_ratio_
                st.write(f"- Th√†nh ph·∫ßn 1 (PC1): {explained_variance_ratio[0]:.4f}")
                st.write(f"- Th√†nh ph·∫ßn 2 (PC2): {explained_variance_ratio[1]:.4f}")
                st.write(f"- Th√†nh ph·∫ßn 3 (PC3): {explained_variance_ratio[2]:.4f}")
                st.write(f"- T·ªïng ph∆∞∆°ng sai ƒë∆∞·ª£c gi·ªØ l·∫°i: {sum(explained_variance_ratio):.4f}")

                # T·∫°o v√† hi·ªÉn th·ªã bi·ªÉu ƒë·ªì d·ª±a tr√™n l·ª±a ch·ªçn c·ªßa ng∆∞·ªùi d√πng
                if chart_type == "3D":
                    # Bi·ªÉu ƒë·ªì 3D
                    fig = px.scatter_3d(
                        x=X_pca[:, 0],  # Th√†nh ph·∫ßn ch√≠nh 1 (PC1) cho tr·ª•c x
                        y=X_pca[:, 1],  # Th√†nh ph·∫ßn ch√≠nh 2 (PC2) cho tr·ª•c y
                        z=X_pca[:, 2],  # Th√†nh ph·∫ßn ch√≠nh 3 (PC3) cho tr·ª•c z
                        color=y,        # M√†u s·∫Øc d·ª±a tr√™n nh√£n l·ªõp (y)
                        opacity=0.6,    # ƒê·ªô trong su·ªët ƒë·ªÉ gi·ªëng h√¨nh ·∫£nh
                        title="Bi·ªÉu ƒë·ªì PCA 3D v·ªõi ƒê∆∞·ªùng Xu h∆∞·ªõng"
                    )

                    # S·∫Øp x·∫øp d·ªØ li·ªáu theo PC1 (x) ƒë·ªÉ ƒë·∫£m b·∫£o tƒÉng d·∫ßn cho ƒë∆∞·ªùng xu h∆∞·ªõng (ch·ªâ s·ª≠ d·ª•ng 2D cho ƒë∆∞·ªùng xu h∆∞·ªõng)
                    sort_indices = np.argsort(X_pca[:, 0])
                    x_sorted = X_pca[sort_indices, 0]  # PC1 ƒë√£ s·∫Øp x·∫øp
                    y_sorted = X_pca[sort_indices, 1]  # PC2 t∆∞∆°ng ·ª©ng v·ªõi PC1 ƒë√£ s·∫Øp x·∫øp

                    # T·∫°o ƒë∆∞·ªùng xu h∆∞·ªõng b·∫±ng UnivariateSpline v·ªõi d·ªØ li·ªáu ƒë√£ s·∫Øp x·∫øp (ch·ªâ s·ª≠ d·ª•ng PC1 v√† PC2)
                    x_smooth = np.linspace(x_sorted.min(), x_sorted.max(), 100)
                    y_smooth = UnivariateSpline(x_sorted, y_sorted, k=3, s=0)(x_smooth)  # ƒê·∫∑t s=0 ƒë·ªÉ tr√°nh l·ªói

                    # Th√™m ƒë∆∞·ªùng cong xanh l√° c√¢y v√†o bi·ªÉu ƒë·ªì 3D (d·ª± ƒëo√°n z=0 cho ƒë∆°n gi·∫£n)
                    fig.add_trace(
                        go.Scatter3d(
                            x=x_smooth,
                            y=y_smooth,
                            z=np.zeros_like(x_smooth),  # Gi·∫£ ƒë·ªãnh z=0 cho ƒë∆∞·ªùng xu h∆∞·ªõng trong 3D
                            mode='lines',
                            line=dict(color='green', width=2),
                            name='ƒê∆∞·ªùng xu h∆∞·ªõng'
                        )
                    )

                    st.markdown("### Bi·ªÉu ƒë·ªì 3D:")
                    st.plotly_chart(fig, use_container_width=True)
                else:
                    # Bi·ªÉu ƒë·ªì 2D
                    fig = px.scatter(
                        x=X_pca[:, 0],  # Th√†nh ph·∫ßn ch√≠nh 1 (PC1) cho tr·ª•c x
                        y=X_pca[:, 1],  # Th√†nh ph·∫ßn ch√≠nh 2 (PC2) cho tr·ª•c y
                        color=y,        # M√†u s·∫Øc d·ª±a tr√™n nh√£n l·ªõp (y)
                        opacity=0.6,    # ƒê·ªô trong su·ªët ƒë·ªÉ gi·ªëng h√¨nh ·∫£nh
                        title="Bi·ªÉu ƒë·ªì PCA 2D v·ªõi ƒê∆∞·ªùng Xu h∆∞·ªõng"
                    )

                    # S·∫Øp x·∫øp d·ªØ li·ªáu theo PC1 (x) ƒë·ªÉ ƒë·∫£m b·∫£o tƒÉng d·∫ßn
                    sort_indices = np.argsort(X_pca[:, 0])
                    x_sorted = X_pca[sort_indices, 0]  # PC1 ƒë√£ s·∫Øp x·∫øp
                    y_sorted = X_pca[sort_indices, 1]  # PC2 t∆∞∆°ng ·ª©ng v·ªõi PC1 ƒë√£ s·∫Øp x·∫øp

                    # T·∫°o ƒë∆∞·ªùng xu h∆∞·ªõng b·∫±ng UnivariateSpline v·ªõi d·ªØ li·ªáu ƒë√£ s·∫Øp x·∫øp
                    x_smooth = np.linspace(x_sorted.min(), x_sorted.max(), 100)
                    y_smooth = UnivariateSpline(x_sorted, y_sorted, k=3, s=0)(x_smooth)  # ƒê·∫∑t s=0 ƒë·ªÉ tr√°nh l·ªói

                    # Th√™m ƒë∆∞·ªùng cong xanh l√° c√¢y v√†o bi·ªÉu ƒë·ªì 2D
                    fig.add_trace(
                        go.Scatter(
                            x=x_smooth,
                            y=y_smooth,
                            mode='lines',
                            line=dict(color='green', width=2),
                            name='ƒê∆∞·ªùng xu h∆∞·ªõng'
                        )
                    )

                    st.markdown("### Bi·ªÉu ƒë·ªì 2D:")
                    st.plotly_chart(fig, use_container_width=True)

                # C·∫≠p nh·∫≠t layout cho c·∫£ 2D v√† 3D (n·ªÅn tr·∫Øng, font ƒëen)
                fig.update_layout(
                    plot_bgcolor='white',
                    paper_bgcolor='white',
                    font_color='black',
                    showlegend=True
                )

                st.markdown("---")
                st.markdown("### ∆Øu ƒëi·ªÉm & Nh∆∞·ª£c ƒëi·ªÉm c·ªßa PCA")
                st.table({
                    "**∆Øu ƒëi·ªÉm**": [
                        "Gi·∫£m chi·ªÅu nhanh, hi·ªáu qu·∫£ v·ªõi d·ªØ li·ªáu tuy·∫øn t√≠nh.",
                        "D·ªÖ tri·ªÉn khai, gi·ªØ l·∫°i ph·∫ßn l·ªõn th√¥ng tin quan tr·ªçng.",
                        "Gi·∫£m thi·ªÉu ƒëa c·ªông tuy·∫øn."
                    ],
                    "**Nh∆∞·ª£c ƒëi·ªÉm**": [
                        "Kh√¥ng hi·ªáu qu·∫£ v·ªõi d·ªØ li·ªáu phi tuy·∫øn t√≠nh.",
                        "M·∫•t m·ªôt ph·∫ßn th√¥ng tin do n√©n d·ªØ li·ªáu.",
                        "Kh√≥ di·ªÖn gi·∫£i √Ω nghƒ©a c√°c th√†nh ph·∫ßn ch√≠nh."
                    ]
                })
                
            elif model_option1 == "T-SNE (t-Distributed Stochastic Neighbor Embedding)":
                st.markdown("## üîπ T-SNE (t-Distributed Stochastic Neighbor Embedding)")
                st.markdown("---")
                st.markdown("### Kh√°i ni·ªám T-SNE (t-Distributed Stochastic Neighbor Embedding)")
                st.markdown("""
                - **T-SNE (t-Distributed Stochastic Neighbor Embedding)** l√† m·ªôt k·ªπ thu·∫≠t gi·∫£m chi·ªÅu phi tuy·∫øn t√≠nh.
                - chuy√™n d√πng ƒë·ªÉ tr·ª±c quan h√≥a d·ªØ li·ªáu nhi·ªÅu chi·ªÅu trong kh√¥ng gian 2D ho·∫∑c 3D. 
                - N√≥ gi·ªØ l·∫°i c·∫•u tr√∫c c·ª•c b·ªô c·ªßa d·ªØ li·ªáu b·∫±ng c√°ch t·ªëi ∆∞u h√≥a s·ª± t∆∞∆°ng ƒë·ªìng gi·ªØa c√°c ƒëi·ªÉm trong kh√¥ng gian g·ªëc v√† kh√¥ng gian th·∫•p chi·ªÅu.
                """)
            
                st.markdown("---")
                st.markdown("### C√°c b∆∞·ªõc thu g·ªçn chi·ªÅu v·ªõi T-SNE")
                st.write("1. **T√≠nh ƒë·ªô t∆∞∆°ng ƒë·ªìng trong kh√¥ng gian g·ªëc**: D√πng ph√¢n ph·ªëi Gaussian ƒë·ªÉ ƒëo kho·∫£ng c√°ch.")
                st.write("2. **T√≠nh ƒë·ªô t∆∞∆°ng ƒë·ªìng trong kh√¥ng gian th·∫•p chi·ªÅu**: D√πng ph√¢n ph·ªëi t-Student ƒë·ªÉ m√¥ ph·ªèng.")
                st.write("3. **T·ªëi ∆∞u h√≥a h√†m m·∫•t m√°t**: D√πng Gradient Descent ƒë·ªÉ gi·∫£m KL Divergence.")
                st.write("4. **Tr·ª±c quan h√≥a**: ƒê∆∞a d·ªØ li·ªáu v·ªÅ kh√¥ng gian 2D/3D.")
                st.markdown("---")
                st.markdown("### C√¥ng th·ª©c to√°n h·ªçc")
                st.markdown("**C√¥ng th·ª©c x√°c su·∫•t c√≥ ƒëi·ªÅu ki·ªán trong t-SNE (Conditional Probability Formula for t-SNE):**")
                
                st.latex(r"p_{j|i} = \frac{\exp(-||x_i - x_j||^2 / 2\sigma_i^2)}{\sum_{k \neq i} \exp(-||x_i - x_k||^2 / 2\sigma_i^2)}")
                st.markdown("""
                - **√ù nghƒ©a**: T√≠nh x√°c su·∫•t c√≥ ƒëi·ªÅu ki·ªán $$( p_{j|i} )$$, th·ªÉ hi·ªán kh·∫£ nƒÉng ƒëi·ªÉm d·ªØ li·ªáu $$( x_j )$$ l√† m·ªôt "h√†ng x√≥m" c·ªßa ƒëi·ªÉm $$( x_i )$$ trong kh√¥ng gian ƒë·∫ßu v√†o (d·ªØ li·ªáu g·ªëc, th∆∞·ªùng l√† kh√¥ng gian cao chi·ªÅu).  
                - **Trong ƒë√≥:**
                    - $$( x_i, x_j )$$: C√°c ƒëi·ªÉm d·ªØ li·ªáu trong kh√¥ng gian g·ªëc.  
                    - $$( ||x_i - x_j|| )$$: Kho·∫£ng c√°ch Euclidean gi·ªØa $$( x_i )$$ v√† $$( x_j )$$.  
                    - $$( \sigma_i )$$: ƒê·ªô l·ªách chu·∫©n c·ª•c b·ªô, ƒë∆∞·ª£c ƒëi·ªÅu ch·ªânh d·ª±a tr√™n m·∫≠t ƒë·ªô d·ªØ li·ªáu xung quanh $$( x_i )$$.  
                    - C√¥ng th·ª©c n√†y s·ª≠ d·ª•ng h√†m Gaussian (b√¨nh th∆∞·ªùng) v√† thu·ªôc v·ªÅ t-SNE, gi√∫p m√¥ h√¨nh h√≥a s·ª± t∆∞∆°ng ƒë·ªìng gi·ªØa c√°c ƒëi·ªÉm trong kh√¥ng gian d·ªØ li·ªáu g·ªëc.
                """)
                st.markdown("**C√¥ng th·ª©c x√°c su·∫•t trong kh√¥ng gian nh√∫ng th·∫•p c·ªßa t-SNE (Low-Dimensional Similarity Probability Formula for t-SNE):**")
                # C√¥ng th·ª©c 2: X√°c su·∫•t q_{ij} trong kh√¥ng gian nh√∫ng th·∫•p
                st.latex(r"q_{ij} = \frac{(1 + ||y_i - y_j||^2)^{-1}}{\sum_{k \neq l} (1 + ||y_k - y_l||^2)^{-1}}")
                st.markdown("""
                - **√ù nghƒ©a**: T√≠nh x√°c su·∫•t $$( q_{ij} )$$, th·ªÉ hi·ªán s·ª± t∆∞∆°ng ƒë·ªìng gi·ªØa c√°c ƒëi·ªÉm $$( y_i )$$ v√† $$( y_j )$$ trong kh√¥ng gian nh√∫ng th·∫•p chi·ªÅu (th∆∞·ªùng l√† 2D ho·∫∑c 3D) sau khi gi·∫£m chi·ªÅu.
                - **Trong ƒë√≥:**  
                    - $$( y_i, y_j )$$: C√°c ƒëi·ªÉm trong kh√¥ng gian nh√∫ng th·∫•p.  
                    - $$( ||y_i - y_j|| )$$: Kho·∫£ng c√°ch Euclidean gi·ªØa $$( y_i )$$ v√† $$( y_j )$$.  
                    - C√¥ng th·ª©c n√†y s·ª≠ d·ª•ng ph√¢n ph·ªëi t-Student (v·ªõi 1 b·∫≠c t·ª± do, t∆∞∆°ng ƒë∆∞∆°ng ph√¢n ph·ªëi Cauchy) ƒë·ªÉ m√¥ h√¨nh h√≥a s·ª± t∆∞∆°ng ƒë·ªìng, gi√∫p gi·∫£m thi·ªÉu s·ª± ch·ªìng l·∫•n c·ªßa c√°c ƒëi·ªÉm trong kh√¥ng gian th·∫•p chi·ªÅu. ƒê√¢y l√† m·ªôt ph·∫ßn c·ªët l√µi c·ªßa t-SNE.
                """)
                st.markdown("**H√†m chi ph√≠ Kullback-Leibler divergence trong t-SNE (KL Divergence Cost Function for t-SNE):**")
                # C√¥ng th·ª©c 3: H√†m chi ph√≠ (Cost Function) c·ªßa t-SNE
                st.latex(r"C = \sum_i \sum_j p_{ij} \log \frac{p_{ij}}{q_{ij}}")
                st.markdown("""
                - **√ù nghƒ©a**: ƒê√¢y l√† h√†m chi ph√≠ (cost function) ho·∫∑c h√†m m·∫•t m√°t c·ªßa t-SNE, ƒëo l∆∞·ªùng s·ª± kh√°c bi·ªát gi·ªØa ph√¢n ph·ªëi x√°c su·∫•t $$( p_{ij} )$$ (t·ª´ kh√¥ng gian d·ªØ li·ªáu g·ªëc) v√† $$( q_{ij} )$$ (t·ª´ kh√¥ng gian nh√∫ng th·∫•p).  
                - **Trong ƒë√≥:**
                    - $$( p_{ij} )$$: X√°c su·∫•t t∆∞∆°ng ƒë·ªìng t·ª´ kh√¥ng gian d·ªØ li·ªáu g·ªëc .  
                    - $$( q_{ij} )$$: X√°c su·∫•t t∆∞∆°ng ƒë·ªìng trong kh√¥ng gian nh√∫ng th·∫•p.  
                    - H√†m chi ph√≠ n√†y s·ª≠ d·ª•ng Kullback-Leibler (KL) divergence ƒë·ªÉ t·ªëi ∆∞u h√≥a, nh·∫±m l√†m cho ph√¢n ph·ªëi trong kh√¥ng gian nh√∫ng th·∫•p kh·ªõp v·ªõi ph√¢n ph·ªëi $$( p_{ij} )$$ trong kh√¥ng gian g·ªëc c√†ng g·∫ßn c√†ng t·ªët. ƒê√¢y l√† m·ªôt ph·∫ßn c·ªët l√µi c·ªßa t-SNE.
                """)

                X, y = make_classification(
                    n_features=6,
                    n_classes=3,
                    n_samples=1500,
                    n_informative=2,
                    random_state=5,
                    n_clusters_per_class=1
                )

                # Ti√™u ƒë·ªÅ v√† ƒë∆∞·ªùng ph√¢n c√°ch
                st.markdown("---")
                st.markdown("### Bi·ªÉu ƒë·ªì D·ªØ li·ªáu Ph√¢n lo·∫°i v·ªõi Plotly")

                # Cho ph√©p ng∆∞·ªùi d√πng ch·ªçn lo·∫°i bi·ªÉu ƒë·ªì (2D ho·∫∑c 3D)
                chart_type = st.selectbox("Ch·ªçn lo·∫°i bi·ªÉu ƒë·ªì:", ["2D", "3D"])

                # Hi·ªÉn th·ªã th√¥ng tin v·ªÅ d·ªØ li·ªáu
                st.markdown("### Th√¥ng tin d·ªØ li·ªáu:")
                st.write(f"- S·ªë m·∫´u (n_samples): {X.shape[0]}")
                st.write(f"- S·ªë ƒë·∫∑c tr∆∞ng (n_features): {X.shape[1]}")
                st.write(f"- S·ªë l·ªõp (n_classes): {len(np.unique(y))}")

                # T·∫°o v√† hi·ªÉn th·ªã bi·ªÉu ƒë·ªì d·ª±a tr√™n l·ª±a ch·ªçn c·ªßa ng∆∞·ªùi d√πng
                if chart_type == "3D":
                    # Bi·ªÉu ƒë·ªì 3D
                    fig = px.scatter_3d(
                        x=X[:, 0],  # S·ª≠ d·ª•ng c·ªôt ƒë·∫ßu ti√™n c·ªßa X cho tr·ª•c x
                        y=X[:, 1],  # S·ª≠ d·ª•ng c·ªôt th·ª© hai c·ªßa X cho tr·ª•c y
                        z=X[:, 2],  # S·ª≠ d·ª•ng c·ªôt th·ª© ba c·ªßa X cho tr·ª•c z
                        color=y,    # M√†u s·∫Øc d·ª±a tr√™n nh√£n l·ªõp (y)
                        opacity=0.8 # ƒê·ªô trong su·ªët
                    )
                    st.markdown("### Bi·ªÉu ƒë·ªì 3D:")
                    st.plotly_chart(fig, use_container_width=True)
                else:
                    # Bi·ªÉu ƒë·ªì 2D (s·ª≠ d·ª•ng 2 ƒë·∫∑c tr∆∞ng ƒë·∫ßu ti√™n)
                    fig = px.scatter(
                        x=X[:, 0],  # S·ª≠ d·ª•ng c·ªôt ƒë·∫ßu ti√™n c·ªßa X cho tr·ª•c x
                        y=X[:, 1],  # S·ª≠ d·ª•ng c·ªôt th·ª© hai c·ªßa X cho tr·ª•c y
                        color=y,    # M√†u s·∫Øc d·ª±a tr√™n nh√£n l·ªõp (y)
                        opacity=0.8 # ƒê·ªô trong su·ªët
                    )
                    st.markdown("### Bi·ªÉu ƒë·ªì 2D:")
                    st.plotly_chart(fig, use_container_width=True)


                st.markdown("---")
                st.markdown("### ∆Øu ƒëi·ªÉm & Nh∆∞·ª£c ƒëi·ªÉm c·ªßa T-SNE")
                st.table({
                    "**∆Øu ƒëi·ªÉm**": [
                        "Gi·ªØ l·∫°i t·ªët c·∫•u tr√∫c c·ª•c b·ªô c·ªßa d·ªØ li·ªáu.",
                        "Hi·ªáu qu·∫£ cho tr·ª±c quan h√≥a d·ªØ li·ªáu ph·ª©c t·∫°p."
                    ],
                    "**Nh∆∞·ª£c ƒëi·ªÉm**": [
                        "T·ªën th·ªùi gian t√≠nh to√°n, kh√¥ng ph√π h·ª£p v·ªõi d·ªØ li·ªáu l·ªõn.",
                        "Kh√¥ng √°p d·ª•ng ƒë∆∞·ª£c cho d·ªØ li·ªáu m·ªõi.",
                        "Ph·ª• thu·ªôc nhi·ªÅu v√†o tham s·ªë."
                    ]
                })
            



    with tab_preprocess:
        with st.expander("**K·ªπ thu·∫≠t thu g·ªçn chi·ªÅu**", expanded=True):
            # Kh·ªüi t·∫°o X_train v√† X_test v·ªõi gi√° tr·ªã m·∫∑c ƒë·ªãnh (None) n·∫øu kh√¥ng c√≥ trong session_state
            X_train = None
            X_test = None

            if "X_train" not in st.session_state or "X_test" not in st.session_state:
                st.error("‚ö†Ô∏è D·ªØ li·ªáu hu·∫•n luy·ªán ho·∫∑c ki·ªÉm tra ch∆∞a ƒë∆∞·ª£c t·∫£i. Vui l√≤ng ki·ªÉm tra l·∫°i.")
                return
            else:
                # L∆∞u d·ªØ li·ªáu v√†o session_state (n·∫øu ch∆∞a c√≥) v√† l·∫•y d·ªØ li·ªáu m√† kh√¥ng in ra
                if "X_train_shape" not in st.session_state:
                    st.session_state.X_train_shape = st.session_state.X_train.shape
                if "X_test_shape" not in st.session_state:
                    st.session_state.X_test_shape = st.session_state.X_test.shape

            # L·∫•y d·ªØ li·ªáu t·ª´ session_state
            X_train = st.session_state.X_train
            X_test = st.session_state.X_test

            # Chu·∫©n h√≥a d·ªØ li·ªáu
            try:
                scaler = StandardScaler()
                X_train_scaled = scaler.fit_transform(X_train)
                X_test_scaled = scaler.transform(X_test)

                st.session_state.X_train_scaled = X_train_scaled
                st.session_state.X_test_scaled = X_test_scaled

                # st.success("‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c chu·∫©n h√≥a th√†nh c√¥ng.")
            except Exception as e:
                st.error(f"‚ö†Ô∏è L·ªói khi chu·∫©n h√≥a d·ªØ li·ªáu: {e}")
                return

            # Ch·ªçn s·ªë l∆∞·ª£ng m·∫´u ƒë·ªÉ gi·∫£m chi·ªÅu (ch·ªâ t·ª´ t·∫≠p hu·∫•n luy·ªán)
            n_samples = st.slider("**S·ªë l∆∞·ª£ng m·∫´u ƒë·ªÉ gi·∫£m chi·ªÅu:**", 
                                min_value=100, 
                                max_value=X_train_scaled.shape[0], 
                                value=X_train_scaled.shape[0], 
                                step=100)
            X_train_subset = X_train_scaled[:n_samples, :]  # L·∫•y m·ªôt t·∫≠p con c·ªßa d·ªØ li·ªáu hu·∫•n luy·ªán

            # Ch·ªçn ph∆∞∆°ng ph√°p gi·∫£m chi·ªÅu
            dim_reduction_method = st.selectbox("**Ch·ªçn ph∆∞∆°ng ph√°p thu g·ªçn chi·ªÅu:**", ["PCA", "t-SNE"])

            if dim_reduction_method == "PCA":
                # Tham s·ªë c·ªßa PCA
                n_components = st.slider("**S·ªë chi·ªÅu:**", 
                                      min_value=2, 
                                      max_value=min(X_train_subset.shape[1], 20), 
                                      value=5)
            

                # Ch·ªçn lo·∫°i bi·ªÉu ƒë·ªì (2D ho·∫∑c 3D)
                chart_type = st.selectbox("**Ch·ªçn lo·∫°i bi·ªÉu ƒë·ªì:**", ["2D", "3D"])

                if st.button("üöÄ Ch·∫°y PCA"):
                    with st.spinner("ƒêang hu·∫•n luy·ªán m√¥ h√¨nh..."):
                        with mlflow.start_run():
                            try:
                                # √Åp d·ª•ng PCA
                                pca = PCA(n_components=n_components if chart_type == "3D" else 2,  
                                        random_state=42)
                                X_train_pca = pca.fit_transform(X_train_subset)

                                # Log tham s·ªë v√†o MLflow
                                mlflow.log_param("algorithm", "PCA")
                                mlflow.log_param("n_components", n_components if chart_type == "3D" else 2)
                                st.session_state.X_train_pca = X_train_pca
                                st.session_state.explained_variance_ratio_ = pca.explained_variance_ratio_
                                mlflow.log_param("X_train_pca", X_train_pca.tolist() if X_train_pca.size > 0 else "Empty")

                                # Log ph∆∞∆°ng sai gi·∫£i th√≠ch
                                explained_variance = np.sum(pca.explained_variance_ratio_)
                                mlflow.log_metric("explained_variance", explained_variance)

                                # T·∫°o v√† hi·ªÉn th·ªã bi·ªÉu ƒë·ªì v·ªõi Plotly (2D ho·∫∑c 3D)
                                if chart_type == "3D":
                                    fig = px.scatter_3d(
                                        x=X_train_pca[:, 0], 
                                        y=X_train_pca[:, 1], 
                                        z=X_train_pca[:, 2] if n_components >= 3 else np.zeros_like(X_train_pca[:, 0]),
                                        color=st.session_state.y_train[:n_samples],  # S·ª≠ d·ª•ng nh√£n hu·∫•n luy·ªán l√†m m√†u
                                        opacity=0.6,
                                        title=f"PCA 3D v·ªõi {n_components} th√†nh ph·∫ßn ch√≠nh"
                                    )
                                else:
                                    fig = px.scatter(
                                        x=X_train_pca[:, 0], 
                                        y=X_train_pca[:, 1],
                                        color=st.session_state.y_train[:n_samples],  # S·ª≠ d·ª•ng nh√£n hu·∫•n luy·ªán l√†m m√†u
                                        opacity=0.6,
                                        title="PCA 2D v·ªõi 2 th√†nh ph·∫ßn ch√≠nh"
                                    )

                                # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì trong Streamlit
                                st.plotly_chart(fig, use_container_width=True)

                                st.markdown(
                                    f"""
                                    ### K·∫øt qu·∫£ PCA:
                                    - T·ªïng ph∆∞∆°ng sai ƒë∆∞·ª£c gi·ªØ l·∫°i: {explained_variance:.2f}  
                                    - **PCA** gi√∫p gi·∫£m chi·ªÅu d·ªØ li·ªáu trong khi v·∫´n gi·ªØ l·∫°i th√¥ng tin quan tr·ªçng. 
                                    """
                                )
                            except Exception as e:
                                st.error(f"‚ö†Ô∏è L·ªói khi ch·∫°y PCA: {e}")
                        mlflow.end_run()

            elif dim_reduction_method == "t-SNE":
                # Tham s·ªë c·ªßa t-SNE
                n_components = st.selectbox("**S·ªë chi·ªÅu ƒë·∫ßu ra:**", [2, 3])
                perplexity = st.slider("**Perplexity:**", min_value=5, max_value=50, value=30)
                learning_rate = st.slider("**Learning rate:**", min_value=10, max_value=1000, value=200)
                n_iter = st.slider("**S·ªë v√≤ng l·∫∑p t·ªëi ƒëa:**", min_value=250, max_value=5000, value=1000, step=250)
                

                if st.button("üöÄ Ch·∫°y t-SNE"):
                    with st.spinner("ƒêang hu·∫•n luy·ªán m√¥ h√¨nh..."):
                        with mlflow.start_run():
                            try:
                                # √Åp d·ª•ng t-SNE
                                tsne = TSNE(n_components=n_components, perplexity=perplexity, learning_rate=learning_rate, 
                                            n_iter=n_iter, random_state=42)
                                X_train_tsne = tsne.fit_transform(X_train_subset)
                                st.session_state.X_train_tsne = X_train_tsne
                                try:
                                    st.session_state.kl_divergence = tsne.kl_divergence_
                                except AttributeError:
                                    st.session_state.kl_divergence = "Kh√¥ng c√≥ th√¥ng tin"
                                mlflow.log_param("algorithm", "t-SNE")
                                mlflow.log_param("n_components", n_components)
                                mlflow.log_param("perplexity", perplexity)
                                mlflow.log_param("learning_rate", learning_rate)
                                mlflow.log_param("n_iter", n_iter)
                                
                                mlflow.log_param("X_train_tsne", X_train_tsne.tolist() if X_train_tsne.size > 0 else "Empty")

                                # T·∫°o v√† hi·ªÉn th·ªã bi·ªÉu ƒë·ªì v·ªõi Plotly (2D ho·∫∑c 3D)
                                if n_components == 3:
                                    fig = px.scatter_3d(
                                        x=X_train_tsne[:, 0], y=X_train_tsne[:, 1], z=X_train_tsne[:, 2],
                                        color=st.session_state.y_train[:n_samples],  # S·ª≠ d·ª•ng nh√£n hu·∫•n luy·ªán l√†m m√†u
                                        opacity=0.6,
                                        title=f"t-SNE 3D v·ªõi Perplexity={perplexity}"
                                    )
                                else:
                                    fig = px.scatter(
                                        x=X_train_tsne[:, 0], y=X_train_tsne[:, 1],
                                        color=st.session_state.y_train[:n_samples],  # S·ª≠ d·ª•ng nh√£n hu·∫•n luy·ªán l√†m m√†u
                                        opacity=0.6,
                                        title=f"t-SNE 2D v·ªõi Perplexity={perplexity}"
                                    )

                                # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì trong Streamlit
                                st.plotly_chart(fig, use_container_width=True)

                                st.markdown(
                                    f"""
                                    ### K·∫øt qu·∫£ t-SNE:
                                    - D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c gi·∫£m chi·ªÅu xu·ªëng {n_components} chi·ªÅu ƒë·ªÉ tr·ª±c quan h√≥a.  
                                    - **t-SNE** gi√∫p gi·ªØ l·∫°i c·∫•u tr√∫c c·ª•c b·ªô c·ªßa d·ªØ li·ªáu, th√≠ch h·ª£p cho d·ªØ li·ªáu phi tuy·∫øn t√≠nh.
                                    """
                                )
                            except Exception as e:
                                st.error(f"‚ö†Ô∏è L·ªói khi ch·∫°y t-SNE: {e}")
                        mlflow.end_run()
                            
    with tab_mlflow:
        st.header("Th√¥ng tin Hu·∫•n luy·ªán & MLflow UI")
        try:  
            client = MlflowClient()
            experiment_name = "PCA_TSNE"
    
            # Ki·ªÉm tra n·∫øu experiment ƒë√£ t·ªìn t·∫°i
            experiment = client.get_experiment_by_name(experiment_name)
            if experiment is None:
                experiment_id = client.create_experiment(experiment_name)
                st.success(f"Experiment m·ªõi ƒë∆∞·ª£c t·∫°o v·ªõi ID: {experiment_id}")
            else:
                experiment_id = experiment.experiment_id
                st.info(f"ƒêang s·ª≠ d·ª•ng experiment ID: {experiment_id}")
    
            mlflow.set_experiment(experiment_name)
    
            # Truy v·∫•n c√°c run trong experiment
            runs = client.search_runs(experiment_ids=[experiment_id])
    
            # 1) Ch·ªçn v√† ƒë·ªïi t√™n Run Name
            st.subheader("ƒê·ªïi t√™n Run")
            if runs:
                run_options = {run.info.run_id: f"{run.data.tags.get('mlflow.runName', 'Unnamed')} - {run.info.run_id}"
                               for run in runs}
                selected_run_id_for_rename = st.selectbox("Ch·ªçn Run ƒë·ªÉ ƒë·ªïi t√™n:", 
                                                          options=list(run_options.keys()), 
                                                          format_func=lambda x: run_options[x])
                new_run_name = st.text_input("Nh·∫≠p t√™n m·ªõi cho Run:", 
                                             value=run_options[selected_run_id_for_rename].split(" - ")[0])
                if st.button("C·∫≠p nh·∫≠t t√™n Run"):
                    if new_run_name.strip():
                        client.set_tag(selected_run_id_for_rename, "mlflow.runName", new_run_name.strip())
                        st.success(f"ƒê√£ c·∫≠p nh·∫≠t t√™n Run th√†nh: {new_run_name.strip()}")
                    else:
                        st.warning("Vui l√≤ng nh·∫≠p t√™n m·ªõi cho Run.")
            else:
                st.info("Ch∆∞a c√≥ Run n√†o ƒë∆∞·ª£c log.")
    
            # 2) X√≥a Run
            st.subheader("Danh s√°ch Run")
            if runs:
                selected_run_id_to_delete = st.selectbox("", 
                                                         options=list(run_options.keys()), 
                                                         format_func=lambda x: run_options[x])
                if st.button("X√≥a Run", key="delete_run"):
                    client.delete_run(selected_run_id_to_delete)
                    st.success(f"ƒê√£ x√≥a Run {run_options[selected_run_id_to_delete]} th√†nh c√¥ng!")
                    st.experimental_rerun()  # T·ª± ƒë·ªông l√†m m·ªõi giao di·ªán
            else:
                st.info("Ch∆∞a c√≥ Run n√†o ƒë·ªÉ x√≥a.")
    
            # 3) Danh s√°ch c√°c th√≠ nghi·ªám
            st.subheader("Danh s√°ch c√°c Run ƒë√£ log")
            if runs:
                selected_run_id = st.selectbox("Ch·ªçn Run ƒë·ªÉ xem chi ti·∫øt:", 
                                               options=list(run_options.keys()), 
                                               format_func=lambda x: run_options[x])
    
                # 4) Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt c·ªßa Run ƒë∆∞·ª£c ch·ªçn
                selected_run = client.get_run(selected_run_id)
                st.write(f"**Run ID:** {selected_run_id}")
                st.write(f"**Run Name:** {selected_run.data.tags.get('mlflow.runName', 'Unnamed')}")
    
                st.markdown("### Tham s·ªë ƒë√£ log")
                st.json(selected_run.data.params)
    
                st.markdown("### Ch·ªâ s·ªë ƒë√£ log")
                metrics = {
                    "n_components": selected_run.data.metrics.get("n_components", "N/A"),
                    "perplexity": selected_run.data.metrics.get("perplexity", "N/A"),
                    "learning_rate": selected_run.data.metrics.get("learning_rate", "N/A"),
                    "n_iter": selected_run.data.metrics.get("n_iter", "N/A")
                }
                st.json(metrics)
    
                # 5) N√∫t b·∫•m m·ªü MLflow UI
                st.subheader("Truy c·∫≠p MLflow UI")
                mlflow_url = "https://dagshub.com/quangdinhhusc/HMVPYTHON.mlflow"
                if st.button("M·ªü MLflow UI"):
                    st.markdown(f'**[Click ƒë·ªÉ m·ªü MLflow UI]({mlflow_url})**')
            else:
                st.info("Ch∆∞a c√≥ Run n√†o ƒë∆∞·ª£c log. Vui l√≤ng hu·∫•n luy·ªán m√¥ h√¨nh tr∆∞·ªõc.")
    
        except Exception as e:
            st.error(f"Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi MLflow: {e}")    

if __name__ == "__main__":
    run_PcaTSNEMinst_app()  


# st.write(f"MLflow Tracking URI: {mlflow.get_tracking_uri()}")
# with st.expander("üñºÔ∏è ƒê√°nh gi√° hi·ªáu su·∫•t m√¥ h√¨nh ph√¢n c·ª•m", expanded=True):
#     # st.write(f"MLflow Tracking URI: {mlflow.get_tracking_uri()}")
#     print("üéØ Ki·ªÉm tra tr√™n DagsHub: https://dagshub.com/Dung2204/Minst-mlflow.mlflow")


# # # # cd "C:\Users\Dell\OneDrive\Pictures\Documents\Code\python\OpenCV\HMVPYTHON\App"
